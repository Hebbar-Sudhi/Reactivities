{"version":3,"sources":["app/layout/NavBar.tsx","features/activities/details/ActivityDetails.tsx","features/activities/form/ActivityForm.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/api/agent.ts","app/layout/LoadingIndicator.tsx","app/layout/App.tsx","reportWebVitals.ts","index.tsx"],"names":["NavBar","openForm","Menu","inverted","fixed","secondary","Container","Item","header","src","alt","style","marginRight","name","Button","positive","content","onClick","ActivityDetails","activity","cancelActivity","Card","fluid","Image","category","Content","Header","title","Meta","date","Description","description","extra","Group","widths","basic","color","id","ActivityForm","selectedActivity","closeForm","saveForm","submitting","initialState","city","venue","useState","setActivity","handleInputChange","event","target","value","Segment","clearing","Form","onSubmit","autoComplete","Field","placeholder","onChange","type","loading","floated","ActivityList","activities","selectActivity","deleteActivity","setTarget","divided","map","as","Extra","e","currentTarget","handleDeleteActivity","Label","ActivityDashboard","props","Grid","Column","width","editMode","axios","defaults","baseURL","process","interceptors","response","use","a","console","log","Promise","reject","responseBody","data","requests","url","get","then","body","post","put","delete","agent","Activities","list","details","create","update","LoadingIndicator","Dimmer","active","Loader","App","setActivities","undefined","setSelectedActivity","setEditMode","setLoading","setSubmitting","handleSelectActivity","find","x","handleCancelActivity","handleFromOpen","useEffect","forEach","split","push","marginTop","marginBottom","filter","uuid","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8b55996a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Button, Container, Menu } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n  openForm: () => void;\r\n}\r\n\r\nfunction NavBar({ openForm }: Props) {\r\n  return (\r\n    <Menu inverted fixed=\"top\" secondary>\r\n      <Container>\r\n        <Menu.Item header>\r\n          <img\r\n            src=\"/assests/logo.png\"\r\n            alt=\"logo\"\r\n            style={{ marginRight: \"10px\" }}\r\n          />\r\n          Reactivities\r\n        </Menu.Item>\r\n        <Menu.Item name=\"Activities\" />\r\n        <Menu.Item>\r\n          <Button positive content=\"Create Activity\" onClick={openForm} />\r\n        </Menu.Item>\r\n      </Container>\r\n    </Menu>\r\n  );\r\n}\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport { Button, Card, Image } from \"semantic-ui-react\";\r\nimport { Activity } from \"../../../app/models/Activity\";\r\n\r\ninterface Props {\r\n  activity: Activity;\r\n  cancelActivity: () => void;\r\n  openForm: (id: string) => void;\r\n}\r\n\r\nexport default function ActivityDetails({\r\n  activity,\r\n  openForm,\r\n  cancelActivity,\r\n}: Props) {\r\n  return (\r\n    <Card fluid>\r\n      <Image src={`/assests/categoryImages/${activity.category}.jpg`} />\r\n      <Card.Content>\r\n        <Card.Header>{activity.title}</Card.Header>\r\n        <Card.Meta>\r\n          <span>{activity.date}</span>\r\n        </Card.Meta>\r\n        <Card.Description>{activity.description}</Card.Description>\r\n      </Card.Content>\r\n      <Card.Content extra>\r\n        <Button.Group widths=\"2\">\r\n          <Button\r\n            basic\r\n            color=\"blue\"\r\n            content=\"Edit\"\r\n            onClick={() => openForm(activity.id)}\r\n          />\r\n          <Button\r\n            basic\r\n            color=\"grey\"\r\n            content=\"Cancel\"\r\n            onClick={cancelActivity}\r\n          />\r\n        </Button.Group>\r\n      </Card.Content>\r\n    </Card>\r\n  );\r\n}\r\n","import React, { ChangeEvent, useState } from \"react\";\r\nimport { Button, Form, Segment } from \"semantic-ui-react\";\r\nimport { Activity } from \"../../../app/models/Activity\";\r\n\r\ninterface Props {\r\n  activity: Activity | undefined;\r\n  closeForm: () => void;\r\n  saveForm: (activity: Activity) => void;\r\n  submitting: boolean;\r\n}\r\n\r\nexport default function ActivityForm({\r\n  activity: selectedActivity,\r\n  closeForm,\r\n  saveForm,\r\n  submitting,\r\n}: Props) {\r\n  const initialState = selectedActivity ?? {\r\n    id: \"\",\r\n    title: \"\",\r\n    category: \"\",\r\n    description: \"\",\r\n    date: \"\",\r\n    city: \"\",\r\n    venue: \"\",\r\n  };\r\n\r\n  const [activity, setActivity] = useState(initialState);\r\n\r\n  function handleSubmit() {\r\n    saveForm(activity);\r\n  }\r\n\r\n  function handleInputChange(\r\n    event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ) {\r\n    const { name, value } = event.target;\r\n    setActivity({ ...activity, [name]: value });\r\n  }\r\n\r\n  return (\r\n    <Segment clearing>\r\n      <Form onSubmit={handleSubmit} autoComplete=\"off\">\r\n        <Form.Field>\r\n          <label>Title</label>\r\n          <input\r\n            placeholder=\"Title\"\r\n            value={activity.title}\r\n            name=\"title\"\r\n            onChange={handleInputChange}\r\n          />\r\n        </Form.Field>\r\n        <Form.Field>\r\n          <label>Description</label>\r\n          <textarea\r\n            placeholder=\"Description\"\r\n            value={activity.description}\r\n            name=\"description\"\r\n            onChange={handleInputChange}\r\n          />\r\n        </Form.Field>\r\n        <Form.Field>\r\n          <label>Category</label>\r\n          <input\r\n            placeholder=\"Category\"\r\n            value={activity.category}\r\n            name=\"category\"\r\n            onChange={handleInputChange}\r\n          />\r\n        </Form.Field>\r\n        <Form.Field>\r\n          <label>Date</label>\r\n          <input\r\n            type=\"date\"\r\n            placeholder=\"Date\"\r\n            value={activity.date}\r\n            name=\"date\"\r\n            onChange={handleInputChange}\r\n          />\r\n        </Form.Field>\r\n        <Form.Field>\r\n          <label>City</label>\r\n          <input\r\n            placeholder=\"City\"\r\n            value={activity.city}\r\n            name=\"city\"\r\n            onChange={handleInputChange}\r\n          />\r\n        </Form.Field>\r\n        <Form.Field>\r\n          <label>Venue</label>\r\n          <input\r\n            placeholder=\"Venue\"\r\n            value={activity.venue}\r\n            name=\"venue\"\r\n            onChange={handleInputChange}\r\n          />\r\n        </Form.Field>\r\n        <Button\r\n          loading={submitting}\r\n          floated=\"right\"\r\n          positive\r\n          type=\"submit\"\r\n          content=\"Submit\"\r\n        />\r\n        <Button\r\n          floated=\"right\"\r\n          type=\"button\"\r\n          content=\"Cancel\"\r\n          onClick={closeForm}\r\n        />\r\n      </Form>\r\n    </Segment>\r\n  );\r\n}\r\n","import React, { SyntheticEvent } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { Button, Item, Label, Segment } from \"semantic-ui-react\";\r\nimport { Activity } from \"../../../app/models/Activity\";\r\n\r\ninterface Props {\r\n  activities: Activity[];\r\n  selectActivity: (id: string) => void;\r\n  deleteActivity: (id: string) => void;\r\n  submitting: boolean;\r\n}\r\n\r\nexport default function ActivityList({\r\n  activities,\r\n  selectActivity,\r\n  deleteActivity,\r\n  submitting,\r\n}: Props) {\r\n\r\nconst [target, setTarget] = useState('');\r\n\r\nfunction handleDeleteActivity(e : SyntheticEvent<HTMLButtonElement>, id: string){\r\n  setTarget(e.currentTarget.name);\r\n  deleteActivity(id);\r\n}\r\n\r\n  return (\r\n    <Segment>\r\n      <Item.Group divided>\r\n        {activities.map((activity) => (\r\n          <Item key={activity.id}>\r\n            <Item.Content>\r\n              <Item.Header as=\"a\">{activity.title}</Item.Header>\r\n              <Item.Meta>{activity.date}</Item.Meta>\r\n              <Item.Description>\r\n                <div>{activity.description}</div>\r\n                <div>\r\n                  {activity.city}, {activity.venue}\r\n                </div>\r\n              </Item.Description>\r\n              <Item.Extra>\r\n                <Button\r\n                  onClick={() => selectActivity(activity.id)}\r\n                  floated=\"right\"\r\n                  content=\"View\"\r\n                  color=\"blue\"\r\n                />\r\n                <Button\r\n                  name={activity.id}\r\n                  loading={submitting && target === activity.id}\r\n                  onClick={(e) => handleDeleteActivity(e, activity.id)}\r\n                  floated=\"right\"\r\n                  content=\"Delete\"\r\n                  color=\"red\"\r\n                />\r\n                <Label basic content={activity.category} />\r\n              </Item.Extra>\r\n            </Item.Content>\r\n          </Item>\r\n        ))}\r\n      </Item.Group>\r\n    </Segment>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport { Activity } from \"../../../app/models/Activity\";\r\nimport ActivityDetails from \"../details/ActivityDetails\";\r\nimport ActivityForm from \"../form/ActivityForm\";\r\nimport ActivityList from \"./ActivityList\";\r\n\r\ninterface Props {\r\n  activities: Activity[];\r\n  selectedActivity: Activity | undefined;\r\n  selectActivity: (id: string) => void;\r\n  cancelActivity: () => void;\r\n  deleteActivity: (id: string) => void;\r\n  editMode: boolean;\r\n  openForm: (id: string) => void;\r\n  closeForm: () => void;\r\n  saveForm: (activity: Activity) => void;\r\n  submitting:boolean\r\n}\r\n\r\nfunction ActivityDashboard(props: Props) {\r\n  return (\r\n    <Grid>\r\n      <Grid.Column width=\"10\">\r\n        <ActivityList\r\n          activities={props.activities}\r\n          selectActivity={props.selectActivity}\r\n          deleteActivity={props.deleteActivity}\r\n          submitting={props.submitting}\r\n        />\r\n      </Grid.Column>\r\n      <Grid.Column width=\"6\">\r\n        {props.selectedActivity && !props.editMode && (\r\n          <ActivityDetails\r\n            activity={props.selectedActivity}\r\n            cancelActivity={props.cancelActivity}\r\n            openForm={props.openForm}\r\n          />\r\n        )}\r\n\r\n        {props.editMode && (\r\n          <ActivityForm\r\n            activity={props.selectedActivity}\r\n            closeForm={props.closeForm}\r\n            saveForm={props.saveForm}\r\n            submitting={props.submitting}\r\n          />\r\n        )}\r\n      </Grid.Column>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default ActivityDashboard;\r\n","import axios, { AxiosResponse } from \"axios\";\r\nimport { Activity } from \"../models/Activity\";\r\n\r\nconst sleep = (delay: number) => {\r\n  return new Promise((resovle) => {\r\n    setTimeout(resovle, delay);\r\n  });\r\n};\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.response.use(async (response) => {\r\n  try {\r\n    if (process.env.NODE_ENV === 'development') await sleep(1500);\r\n    return response;\r\n  } catch (error) {\r\n    console.log(error);\r\n    return await Promise.reject(error);\r\n  }\r\n});\r\n\r\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n  get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n  post: <T>(url: string, body: {}) =>\r\n    axios.post<T>(url, body).then(responseBody),\r\n  put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n  del: <T>(url: string) => axios.delete<T>(url).then(responseBody),\r\n};\r\n\r\nconst Activities = {\r\n  list: () => requests.get<Activity[]>(\"/activities\"),\r\n  details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n  create: (activity: Activity) => requests.post<void>(\"/activities\", activity),\r\n  update: (activity: Activity) =>\r\n    requests.put<void>(`/activities/${activity.id}`, activity),\r\n  delete: (id: string) => requests.del<void>(`/activities/${id}`),\r\n};\r\n\r\nconst agent = {\r\n  Activities,\r\n};\r\n\r\nexport default agent;\r\n","import React from \"react\";\r\nimport { Dimmer, Loader } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n  inverted?: boolean;\r\n  content?: string;\r\n}\r\n\r\nexport default function LoadingIndicator({\r\n  inverted = true,\r\n  content = \"Loading...\",\r\n}: Props) {\r\n  return (\r\n    <Dimmer active={true} inverted={inverted}>\r\n      <Loader content={content} />\r\n    </Dimmer>\r\n  );\r\n}\r\n","import React, { useState, useEffect, Fragment } from \"react\";\r\nimport { Container } from \"semantic-ui-react\";\r\nimport { Activity } from \"../models/Activity\";\r\nimport NavBar from \"./NavBar\";\r\nimport ActivityDashboard from \"../../features/activities/dashboard/ActivityDashboard\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport agent from \"../api/agent\";\r\nimport LoadingIndicator from \"./LoadingIndicator\";\r\n\r\nfunction App() {\r\n  const [activities, setActivities] = useState<Activity[]>([]);\r\n  const [selectedActivity, setSelectedActivity] =\r\n    useState<Activity | undefined>(undefined);\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const [submitting, setSubmitting] = useState(false);\r\n\r\n  useEffect(() => {\r\n    agent.Activities.list().then((response) => {\r\n      let activities: Activity[] = [];\r\n      response.forEach((activity) => {\r\n        activity.date = activity.date.split(\"T\")[0];\r\n        activities.push(activity);\r\n      });\r\n      setActivities(activities);\r\n      setLoading(false);\r\n    });\r\n  }, []);\r\n\r\n  function handleSelectActivity(id: string) {\r\n    setSelectedActivity(activities.find((x) => x.id === id));\r\n  }\r\n\r\n  function handleCancelActivity() {\r\n    setSelectedActivity(undefined);\r\n  }\r\n\r\n  function handleFromOpen(id?: string) {\r\n    id ? handleSelectActivity(id) : handleCancelActivity();\r\n    setEditMode(true);\r\n  }\r\n\r\n  function handleFormClose() {\r\n    setEditMode(false);\r\n  }\r\n\r\n  function handleSaveActivity(activity: Activity) {\r\n    setSubmitting(true);\r\n\r\n    if (activity.id) {\r\n      agent.Activities.update(activity).then(() => {\r\n        setActivities([\r\n          ...activities.filter((x) => x.id !== activity.id),\r\n          activity,\r\n        ]);\r\n      });\r\n    } else {\r\n      activity.id = uuid();\r\n      agent.Activities.create(activity).then(()=>{\r\n        setActivities([...activities, { ...activity}])\r\n      })\r\n    }\r\n\r\n    setSelectedActivity(activity);\r\n    setEditMode(false);\r\n    setSubmitting(false);\r\n  }\r\n\r\n  function handleDeleteActivity(id: string) {\r\n    setSubmitting(true);\r\n\r\n    agent.Activities.delete(id).then(()=>{\r\n      setActivities([...activities.filter(x=>x.id !==id)])\r\n      setSubmitting(false);\r\n    }\r\n    )\r\n  }\r\n\r\n  if (loading) return <LoadingIndicator content=\"Loading Activities...\" />;\r\n  return (\r\n    <Fragment>\r\n      <NavBar openForm={handleFromOpen} />\r\n      <Container style={{ marginTop: \"6em\", marginBottom: \"6em\" }}>\r\n        <ActivityDashboard\r\n          activities={activities}\r\n          selectedActivity={selectedActivity}\r\n          selectActivity={handleSelectActivity}\r\n          cancelActivity={handleCancelActivity}\r\n          deleteActivity={handleDeleteActivity}\r\n          editMode={editMode}\r\n          openForm={handleFromOpen}\r\n          closeForm={handleFormClose}\r\n          saveForm={handleSaveActivity}\r\n          submitting={submitting}\r\n        />\r\n      </Container>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './app/layout/styles.css';\r\nimport App from './app/layout/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'semantic-ui-css/semantic.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}